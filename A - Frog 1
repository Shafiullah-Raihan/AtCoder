///https://atcoder.jp/contests/dp/tasks/dp_a

#include <bits/stdc++.h>

using namespace std;
const int mx = 1e5+111;
int n;
int arr[mx];
int dp[mx];
int maxCost(int p)
{
    if(p==n) return 0;
    if(dp[p]!= -1)  return dp[p];

    int ret1=2e9,ret2= 2e9;

    if(p+1<=n){
        ret1 = abs(arr[p] - arr[p+1]) + maxCost(p+1);
    }

    if(p+2<=n){
        ret2 = abs(arr[p]- arr[p+2]) + maxCost(p+2);
    }

    dp[p] = min(ret1,ret2);
    return dp[p];

}

int main() {


        cin>>n;
        for(int i=1;i<=n;i++)  cin>>arr[i];
        memset(dp,-1,sizeof(dp));
        int mx = maxCost(1);
        cout<< mx<<endl;

    return 0;
}
